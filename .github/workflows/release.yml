name: Create Release

on:
  workflow_dispatch:
    inputs:
      releaseType:
        description: 'Release Type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
        cache: maven
    
    - name: Configure Git
      run: |
        git config user.name "GitHub Actions"
        git config user.email "actions@github.com"
    
    - name: Get current version from pom.xml
      id: get_version
      run: |
        CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "CURRENT_VERSION=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        
    - name: Calculate new version
      id: calculate_version
      run: |
        CURRENT_VERSION=${{ steps.get_version.outputs.CURRENT_VERSION }}
        RELEASE_TYPE=${{ github.event.inputs.releaseType }}
        
        # Remove -SNAPSHOT if present
        CURRENT_VERSION=${CURRENT_VERSION%-SNAPSHOT}
        
        # Split version into major, minor, patch
        IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT_VERSION"
        
        if [ "$RELEASE_TYPE" == "major" ]; then
          NEW_VERSION="$((MAJOR + 1)).0.0"
        elif [ "$RELEASE_TYPE" == "minor" ]; then
          NEW_VERSION="$MAJOR.$((MINOR + 1)).0"
        else
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
        fi
        
        echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
    
    - name: Update version in pom.xml
      run: mvn versions:set -DnewVersion=${{ steps.calculate_version.outputs.NEW_VERSION }} -DgenerateBackupPoms=false
    
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    
    - name: Commit and push version update
      run: |
        git add pom.xml
        git commit -m "Bump version to ${{ steps.calculate_version.outputs.NEW_VERSION }}"
        git push
    
    - name: Create Tag
      run: |
        git tag -a v${{ steps.calculate_version.outputs.NEW_VERSION }} -m "Release v${{ steps.calculate_version.outputs.NEW_VERSION }}"
        git push origin v${{ steps.calculate_version.outputs.NEW_VERSION }}
    
    # The actual release will be created by the build.yml workflow when the tag is pushed 